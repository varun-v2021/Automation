1. In ~/.m2/settings.xml (create file if not available), add the following in <servers> section

		<server>
        <id>TomcatServer</id>
        <username>admin</username>
        <password>admin</password>
        </server>
        
2. /Users/VVenkatesh/Downloads/apache-tomcat-7.0.72/conf/tomcat-users.xml must contain the user with role manager-script

	<role rolename="manager-script"/>
  	<user password="admin" roles="manager-script" username="admin"/>
  	
 	Make sure the username and password matches at both maven and tomcat-users settings.
 	
3. Create directory src/main/webapp/WEB-INF, src/main/webapp/WEB-INF/web.xml in this pom project.

4. Tomcat7 is compatible with Java 1.6 and 1.7, tomcat 8 with 1.7 and above. If a pom project by default has  JRE System Library as J2SE-1.5, then
goto project->properties->project facets, change the java to 1.7/1.8 based on the tomcat container to be deployed. Also select the JAX-RS version.
JAX-RS version as 1.1 or 2.0. Based on this selection, web.xml file must be modified.

5. In web.xml must contain, (recommended 1.1 as it is working here) 

		For JAX-RS 1.1

		<servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>com.var.automator.example</param-value>
		</init-param>
		
		For JAX-RS 2.0
		
		<servlet-class>com.glassfish.jersey.spi.container.servlet.ServletContainer</servlet-class>
		<init-param>
			<param-name>com.glassfish.jersey.config.property.packages</param-name>
			<param-value>com.var.automator.example</param-value>
		</init-param>
		
6. In pom.xml, required dependencies is available in jersey-bundle repos/jar. Select carefully based on version chosen i.e. either 1.1/2.0
	For 1.1, following must be present in pom.xml
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-bundle</artifactId>
			<version>1.19.1</version>
		</dependency>

7. To deloy the service on tomcat7, the "Server Locations" properties in the Tomcat server must be modified.
   Double click on the tomcat server such that it will open the overview of configs.
   By default "Use workspace metadata" will be enabled, but "Use Tomcat installation" should be selected.

8. After the above changes in project and coding, following command will deploy the war file on tomcat container. Make sure that tomcat server is
	running before executing the below deployment script

		mvn clean install war:war tomcat7:redeploy
		
9.	To observe the REST calls,	http://localhost:8080/automator/rest/start/android/mobile/all

10. If ANDROID_HOME or any environment variable is not able to be fetched by eclipse, then verify whether terminal shell has proper values set.
   If yes, then close the currently running eclipse and start eclipse from the verified shell.
   
References:
https://www.mkyong.com/webservices/jax-rs/jersey-hello-world-example/
http://testng.org/doc/documentation-main.html#running-testng-programmatically
http://stackoverflow.com/questions/5999100/is-there-a-block-until-condition-becomes-true-function-in-java
http://stackoverflow.com/questions/18279302/how-do-i-perform-a-java-callback-between-classes
http://stackoverflow.com/questions/27679901/asynchronous-servlet-with-embedded-jetty
https://www.jayway.com/2014/05/16/async-servlets/
https://www.tutorialspoint.com/restful/restful_quick_guide.htm
http://jersey.java.net
http://crunchify.com/how-to-build-restful-service-with-java-using-jax-rs-and-jersey/
http://stackoverflow.com/questions/8444107/classnotfoundexception-when-starting-tomcat
http://stackoverflow.com/questions/15824096/how-to-deploy-war-with-maven-to-tomcat
http://stackoverflow.com/questions/30174877/maven-plugin-for-clean-the-tomcat-target-folder-and-war-file
http://www.qaautomated.com/2016/01/how-to-start-appium-server-using-java.html